"use client";

import * as React from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Wand2, Loader2, Image as ImageIcon } from "lucide-react";
import Image from "next/image";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { generateImageFromPrompt } from "@/ai/flows/generate-image-from-prompt";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Skeleton } from "./ui/skeleton";
import { SidebarGroupLabel } from "./ui/sidebar";

const formSchema = z.object({
  prompt: z.string().min(10, {
    message: "Prompt must be at least 10 characters.",
  }),
  size: z.enum(['256x256', '512x512', '1024x1024']).default('512x512'),
});

export function ImageGenerator() {
  const { toast } = useToast();
  const [loading, setLoading] = React.useState(false);
  const [generatedImage, setGeneratedImage] = React.useState<string | null>(null);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      prompt: "",
      size: '512x512',
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setLoading(true);
    setGeneratedImage(null);
    try {
      const result = await generateImageFromPrompt({
        prompt: values.prompt,
        size: values.size,
      });
      setGeneratedImage(result.media);
      toast({
        title: "Image Generated",
        description: "Your new image has been successfully created.",
      });
    } catch (error) {
      console.error("Image generation failed:", error);
      toast({
        variant: "destructive",
        title: "Generation Failed",
        description: "Could not generate the image. Please try again.",
      });
    } finally {
      setLoading(false);
    }
  }

  return (
    <Card className="bg-transparent border-none shadow-none">
      <CardHeader className="p-2">
        <SidebarGroupLabel>
          <Wand2 />
          AI Image Generator
        </SidebarGroupLabel>
      </CardHeader>
      <CardContent className="p-2">
        <div className="mb-4 aspect-square w-full rounded-lg bg-muted flex items-center justify-center overflow-hidden">
          {loading ? (
            <Skeleton className="h-full w-full" />
          ) : generatedImage ? (
            <Image
              src={generatedImage}
              alt="Generated by AI"
              width={512}
              height={512}
              className="object-contain"
            />
          ) : (
            <div className="text-muted-foreground flex flex-col items-center text-center p-4">
              <ImageIcon className="h-12 w-12 mb-2" />
              <p className="text-sm">Your generated image will appear here.</p>
            </div>
          )}
        </div>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="prompt"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Prompt</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="e.g., A synthwave-style landscape with a retro car"
                      className="resize-none"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="size"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Size</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select a size" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="256x256">256x256</SelectItem>
                      <SelectItem value="512x512">512x512</SelectItem>
                      <SelectItem value="1024x1024">1024x1024</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit" className="w-full" disabled={loading}>
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Wand2 className="mr-2 h-4 w-4" />
                  Generate
                </>
              )}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}
